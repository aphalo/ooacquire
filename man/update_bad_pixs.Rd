% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update-instr-desc.R
\name{update_bad_pixs}
\alias{update_bad_pixs}
\title{Update bad-pixels in instrument descriptor}
\usage{
update_bad_pixs(x, bad.pixs = NULL, action = "replace")
}
\arguments{
\item{x}{raw_spct or raw_mspct object with attribute \code{instr.desc} set.}

\item{bad.pixs}{numeric New vector of indexes to bad pixels in the detector
array. If \code{NULL}, bad pixels are retrieved from calibration data in
the current version of 'ooacquire'.}

\item{action}{character One of "replace" or "add".}
}
\value{
a copy of \code{x} with an updated \code{instr.desc} attribute
  embedded.
}
\description{
Update field \code{bad.pixs} of the instrument descriptor embedded in
\code{raw_spct} and \code{raw_mspct} objects.
}
\details{
Spectral objects, including those with raw counts data can contain an
instrument descriptor. One member of this attribute is a vector of indexes to
bad pixels. New bad pixels can be identified in some cases after data are
acquired. Recomputing of physical quantities from raw counts normally reuses
the embedded calibration data. Function \code{update_bad_pixs()} makes it
possible to update the embedded bad pixels information before recomputing
derived quantities. This function can be applied only to
\code{raw_spct} objects created with functions from package 'ooacquire'.

With defaults arguments for formal parameters \code{bad.pixs} and
\code{action}, the \code{bad.pixs} field of the descriptor is updated to
match that in the matching calibration data in the version of 'ooacquire'
currently loaded. However, if a numeric vector to positions in the detector
array is passed as argument, depending on the argument passed to
\code{action}, this vector will be used either to replace the existing one,
or the indexes in the vector "added" to those already stored, using
\code{union()}.
}
\note{
Only objects of class \code{raw_spct}, individually or as members of a
\code{raw_mspct} object, are supported as the update must precede any
conversion into physical units, and will propagate to returned values when
computations are applied to the updated \code{raw_spct} objects.
}
